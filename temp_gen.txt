---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";
const locale = (Astro.locals?.lang as "en" | "fr") ?? "en";
// @ts-ignore
const user = Astro.locals.user;
---

<Layout title={ui[locale].generator.title}>
  <div class="space-y-6 p-6">
    <!-- Partie haute : SVG + mockup -->
    <div class="grid lg:grid-cols-2 gap-6">
      <!-- Conteneur SVG -->
      <div
        id="svg-container"
        class="border border-base-300 rounded-box h-[80dvh] flex items-center justify-center"
      >
        <p class="text-base-content/70">
          {ui[locale].generator.contentPlaceholder}
        </p>
      </div>

      <!-- Mockup code -->
      <div class="mockup-window border border-base-300 h-[80dvh]">
        <div class="border-t border-base-300 h-80 overflow-auto p-4">
          <pre
            id="svg-output"
            class="whitespace-pre-wrap">
            <code>{ui[locale].generator.codePlaceholder}</code>
          </pre>
        </div>
      </div>
    </div>

    <!-- Historique de chat (DaisyUI) -->
    <div class="border border-base-300 rounded-box p-4 max-h-80 overflow-auto">
      <div id="chat-log" class="space-y-3"></div>
    </div>

    <!-- Partie basse : input + boutons -->
    <div class="join w-full items-center">
      <input
        id="user-prompt"
        type="text"
        placeholder={ui[locale].generator.promptLabel}
        class="input input-bordered join-item w-full"
      />
      <button id="generate-button" class="btn btn-primary join-item">
        {ui[locale].generator.generateButton}
      </button>
      <button id="edit-button" class="btn btn-secondary m-2"
        >{ui[locale].generator.editButton}</button
      >
      <button id="save-button" class="btn btn-accent m-2"> Sauvegarder </button>
      <a href="/gallery" class="btn btn-outline m-2"
        >{ui[locale].generator.viewButton}</a
      >
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck
  let promptList = [];
  function nowTime() {
    const d = new Date();
    return `${d.getHours().toString().padStart(2, "0")}:${d
      .getMinutes()
      .toString()
      .padStart(2, "0")}`;
  }
  function escapeHtml(text) {
    const map = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#039;" };
    return String(text).replace(/[&<>"']/g, (m) => map[m]);
  }
  function appendChatBubble(role, content) {
    const chatLog = document.getElementById("chat-log");
    if (!chatLog) return;
    const isUser = role === "user";
    const align = isUser ? "chat-end" : "chat-start";
    const name = isUser ? "You" : "SVG Bot";
    const avatar = isUser
      ? "https://img.daisyui.com/images/profile/demo/anakeen@192.webp"
      : "https://img.daisyui.com/images/profile/demo/kenobee@192.webp";
    const bubbleText = escapeHtml(content);
    const wrapper = document.createElement("div");
    wrapper.className = `chat ${align}`;
    wrapper.innerHTML = `
      <div class="chat-image avatar">
        <div class="w-10 rounded-full">
          <img alt="avatar" src="${avatar}" />
        </div>
      </div>
      <div class="chat-header">
        ${name}
        <time class="text-xs opacity-50">${nowTime()}</time>
      </div>
      <div class="chat-bubble">${bubbleText}</div>
    `;
    chatLog.appendChild(wrapper);
    chatLog.parentElement?.scrollTo({ top: chatLog.parentElement.scrollHeight, behavior: "smooth" });
  }
  async function generateSVG(prompt) {
    const res = await fetch("/api/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(prompt),
    });
    const data = await res.json();
    return data.svg;
  }
  const editButton = document.getElementById("edit-button");

  async function handleEdit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("Prompt soumis : ", prompt);
    // Ajout du prompt de l'utilisateur ï¿½ï¿½ la liste
    promptList.push({ role: "user", content: prompt });
    appendChatBubble("user", prompt || "");
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner de chargement
    svgContainer.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour gÇ¸nÇ¸rer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la rÇ¸ponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("Code SVG gÇ¸nÇ¸rÇ¸ : ", aiResponse.content);
    // Ajouter la rÇ¸ponse de l'IA ï¿½ï¿½ la liste des prompts
    promptList.push(aiResponse);
    appendChatBubble("assistant", "SVG gÃ©nÃ©rÃ© âœ”");
    appendChatBubble("assistant", "SVG mis Ã  jour âœ”");
    // Afficher le SVG gÇ¸nÇ¸rÇ¸
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // RÇ¸activer les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
    console.log("Historique des prompts : ", promptList);
  }

  if (editButton) {
    editButton.addEventListener("click", handleEdit);
  }
  async function handleSubmit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("submitted: ", prompt);
    // RÇ¸initialiser la liste des prompts
    promptList.length = 0;
    promptList.push({ role: "user", content: prompt });
    const chatLog = document.getElementById("chat-log");
    if (chatLog) chatLog.innerHTML = "";
    appendChatBubble("user", prompt || "");
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner
    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour gÇ¸nÇ¸rer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la rÇ¸ponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("svgCode: ", aiResponse.content);
    // Ajouter la rÇ¸ponse de l'IA ï¿½ï¿½ la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG gÇ¸nÇ¸rÇ¸
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // RÇ¸activer les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
  }

  const generateButton = document.getElementById("generate-button");
  if (generateButton) {
    generateButton.addEventListener("click", handleSubmit);
  }
  // Fonction utilitaire pour sauvegarder le SVG
  const saveButton = document.getElementById("save-button");

  async function saveSVG(params) {
    // Envoi de la requÇ¦te ï¿½ï¿½ notre endpoint
    const res = await fetch("/api/saveSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(params),
    });
    return await res.json();
  }

  // Gestionnaire d'Ã©vÃ©nements pour le bouton de sauvegarde
  if (saveButton) {
    // RÃ©cupÃ©rer les informations de l'utilisateur depuis le localStorage
    const user = JSON.parse(localStorage.getItem("user"));

    saveButton.addEventListener("click", async () => {
      // VÃ©rifier si l'utilisateur est connectÃ©
      if (!user || !user.id) {
        alert("Vous devez Ãªtre connectÃ© pour sauvegarder un SVG.");
        window.location.href = "/login";
        return;
      }

      // Demande du nom du SVG Ã  l'utilisateur
      const name = prompt("Enter a name for the SVG:");
      if (!name) return; // Si l'utilisateur annule

      const svgOutput = document.getElementById("svg-output")?.textContent;
      console.log("Saving SVG: ", JSON.stringify(svgOutput));

      // PrÃ©paration des donnÃ©es pour la sauvegarde avec l'ID utilisateur
      const params = {
        name: name,
        code_svg: svgOutput || "<svg></svg>",
        chat_history: JSON.stringify(promptList),
        user: user.id,
      };

      // Sauvegarde et gestion de la rÃ©ponse
      const result = await saveSVG(params);
      if (result.success) {
        alert("SVG sauvegardÃ© avec succÃ¨s !");
      } else {
        alert("Erreur lors de la sauvegarde : " + result.error);
      }
    });
  }
</script>

